1. Sailing: The Journey is the Destination
Your concern about sailing becoming tedious is valid. The key is to make the journey as engaging as the destination, treating the sea itself as a character, much like the biomes in RimWorld. Here’s how we can make sailing compelling:

A "Living" Ocean: Instead of a static point-to-point map, imagine a procedurally generated ocean with dynamic systems.

Weather and Sea Conditions: Implement systems for wind speed and direction, fog, storms, and different wave heights. Your crew would need to actively manage the sails to catch the wind, and rough seas could injure crew, damage the ship, or wash cargo overboard. This creates constant, low-level engagement.

Ocean Currents: Like wind, currents could speed up or slow down your travel, creating natural "highways" and "backwaters" on the map.

Resource Veins (At Sea!): While you can't mine mountains, you can have areas rich in specific fish, floating salvage, seaweed patches (for food or crafting), or even mysterious flotsam from a sunken civilization. This encourages exploration off the beaten path.

Events and Encounters: Take a page from FTL and Sunless Sea. The journey between points of interest should be filled with narrative events: spotting a distant plume of smoke, finding a message in a bottle, encountering a ghost ship, or having to navigate a treacherous coral reef.

The Ship as a Mini-Base:

Real-time Management: Like RimWorld, managing your ship in real-time (with pause) is crucial. Crew members will have jobs: manning the helm, adjusting sails, fishing, cooking, crafting (sail repairs, harpoon making), and standing watch.

Building and Expanding: Start with a small raft or sloop. As you gather resources (wood from salvaged ships or islands, cloth for sails), you can physically expand your ship, adding new "rooms" or decks. This provides a tangible sense of progression. Imagine bolting a captured enemy raft onto your own to expand your deck space.

This approach combines the strategic overview of an FTL map (choosing your general course) with the micro-management and emergent stories of a RimWorld colony. The act of sailing becomes a continuous challenge of resource management, risk assessment, and crew optimization.

2. Narrative: A Sandbox with Purpose
You can have the best of both worlds: a sandbox experience with an underlying, non-intrusive main quest.

The "Why": Let's establish a compelling reason for being at sea. Perhaps a cataclysmic event has flooded the world, and what's left of civilization exists on floating cities or mountainous islands. Your starting crew could be survivors of this event.

A "Soft" Main Quest: The goal isn't to be forced upon the player but to be discovered. Maybe your initial colonists have a shared memory or a cryptic map hinting at a "safe haven" or a way to reverse the cataclysm. This gives players a long-term goal if they choose to pursue it.

Freelance Freedom: The core gameplay loop should be about survival and thriving in this new world. This naturally lends itself to a mercenary/freelance approach. Factions will have needs, creating a dynamic mission system:

Faction A needs you to escort their trade ships through pirate territory.

Faction B wants you to chart a new, faster route to a resource-rich island.

Faction C, a group of militant environmentalists, might hire you to dismantle an industrial faction's polluting sea-dredger.

Total War Lite: Instead of conquering the whole map, focus on influence. Completing missions for a faction could grant you favors, access to their exclusive ship parts, or even a letter of marque to legally hunt their enemies. You could eventually establish your own outpost or floating colony, becoming a faction yourself. This feels less like a pressure to "win" and more like a natural progression of power.

This structure allows players to create their own stories. One player might become a feared pirate king, another a renowned explorer, and a third a key player in the political landscape, all within the same sandbox.

3. Combat: FTL Meets RimWorld
This hybrid combat system sounds incredible. Here’s a potential flow:

Ship-to-Ship Phase (FTL-style):

You are in a side-view or top-down tactical view of both ships.

You manage power distribution to engines, shields (if you have them), and weapon systems.

Crew members man cannons, which have reload times and different shot types (e.g., round shot for hull damage, chain shot for sail damage).

Target specific "rooms" or systems on the enemy ship: cannons to reduce their firepower, engines to stop them from fleeing, or the hull to create breaches.

Damage can cause fires, hull breaches (leading to flooding that crew must patch), and system failures, just like in FTL.

Boarding Action (RimWorld-style):

When one ship gets close enough, you can initiate a boarding action. The view could zoom in to a top-down perspective of both ships' decks side-by-side.

The game's core mechanics of drafting colonists, equipping them with swords, pistols, etc., and managing their real-time combat would take over.

Your brawlers with peg legs and your sharpshooters with bionic eyes would shine here. The traits system becomes critical: a "coward" might flee, while a "brawler" gets a melee bonus.

This creates a fantastic tactical choice: do you try to sink the enemy from afar, or do you risk your crew's lives in a boarding action to capture the ship and its cargo intact?

4. Docking at Cities: Meaningful Hubs
Avoid simple menus. Make cities feel like a welcome respite and a place of opportunity.

Mini-Maps: When you dock, you could transition to a small, explorable city map, similar to a town in Stardew Valley. You would see your crew members disembark and wander.

Specialized Districts: Each city should have a distinct character and specialize in certain goods or services, creating reasons to travel.

Ironport: A grimy industrial hub. Here you'll find the best ship armor, cannons, and maybe even steam-powered engine parts. The taverns are rough, but the mercenary contracts are plentiful.

The Floating Gardens: An agricultural city built on massive lily pads. Here you can buy rare foods, potent medicines, and hire crew with high "growing" or "doctoring" skills.

The Sunken Bazaar: A city built into the cliffs of a tall mountain, where traders hawk exotic goods from distant lands. You might find a black market for bionic parts here.

Interactive Locations:

Tavern: The heart of the city. Hear rumors, find unique crew members (each with a backstory like Prison Architect), and get mission hooks.

Shipwright: Buy new ships, repair your current one, and purchase hull upgrades. This could be where you apply the materials you've gathered.

Market: A place to buy and sell goods. The economy could be dynamic; if you sell a massive haul of fish, the price of fish in that city might temporarily drop.

The Menagerie: A special shop where you can, indeed, buy a cat for your ship (for a morale boost and to catch rats that might eat your food stores!).

5. Optimizing for Fun
The fun will come from the interplay of these systems and the stories they create. The core loop should be:

Explore -> Encounter Challenges -> Overcome with cleverness -> Gather Resources -> Improve Ship/Crew -> Explore further.

The key is to always present the player with interesting choices with tangible consequences, both good and bad.

6. Stealing from the Best
Prison Architect/Dwarf Fortress: Every crew member should have a detailed backstory, traits, and even relationships. A "bloodlust" trait is great in a fight but might lead to them starting brawls on your ship. Two crew members might fall in love, giving them a mood boost when near each other, but a devastating mood debuff if one dies.

Sunless Sea: Embrace weird fiction. The ocean is a mysterious place. Introduce bizarre, non-hostile creatures, strange phenomena, and cryptic lore that players can piece together. This will make exploration truly exciting.

Mount & Blade: A dynamic faction system where your actions have real consequences on the political map is a must. Sinking a trade ship shouldn't just be a one-off event; it should lower your standing with that faction and maybe even put a bounty on your head.

7. Game Engine: Godot is a Great Choice
Godot is an excellent choice for a 2D game like this.

Pros: It's free, open-source, has a dedicated 2D workflow, uses a simple scripting language (GDScript, similar to Python), and has a growing and supportive community. Its node-based system is also very intuitive for managing complex game objects and scenes, which would be perfect for your ship-building and character systems.

Alternatives: Unity is also very capable for 2D, but some developers find it heavier and its licensing can be a concern for indies. GameMaker is fantastic for 2D but might be less suited for the deep simulation aspects you're envisioning.

For what you're describing, Godot hits the sweet spot of power, ease of use, and cost.

8. Your MVP and Timeline
Let's be realistic for a slow, off-time project. This is a marathon, not a sprint. The goal of the MVP is to get the core loop playable.

MVP Goal: Sail from Point A to Point B, get into a fight, and see the consequences.

Month 1-2: The Core Systems

Focus: A single character on a 3x3 grid raft.

Tasks:

Basic character movement on the raft.

Implement basic needs: hunger.

Add a single resource: raw fish. You can "catch" it via a button press.

Basic sailing: Make the raft move in a single direction on a blank blue screen.

Month 3-4: The World and Interaction

Focus: Making sailing meaningful.

Tasks:

Create a simple map with a starting island and a destination island.

Implement basic docking: just a menu that says "You have arrived."

Add one enemy: a stationary pirate raft that shoots at you.

Basic combat: You can shoot back. Health for your raft and the enemy raft.

Month 5-6: The RimWorld Layer

Focus: Adding management and depth.

Tasks:

Introduce a second crew member.

Implement a simple "Jobs" system: one person must be at the "Helm" to sail.

Add basic character stats (e.g., a "Sailing" skill that makes you move faster).

Flesh out the combat: Add boarding where characters can fight each other.

At the end of this ~6-month period, you'll have a very rough but playable slice of the game. You'll be able to test the core loop and see what's fun and what isn't. From there, you can start layering on the other systems: ship building, more complex crew management, factions, etc.

9. Potential Pitfalls and Blind Spots
Feature Creep: Your idea is ambitious. Stick to the MVP plan religiously at first. It's easy to get distracted by adding a cool new feature before the core is solid.

Performance: A deep simulation with many characters and objects can become slow. Keep performance in mind from the start, especially with a dynamic, expandable ship.

UI/UX: A complex simulation game lives and dies by its user interface. It needs to be clear and provide the right information at the right time. Don't treat UI as an afterthought.

Balancing: With so many interconnected systems (combat, needs, skills, economy), balancing the game will be a massive, ongoing task.

10. Solving the Art Asset Problem
You're a programmer, not an artist, and that's perfectly fine. Focus on "programmer art" (colored squares and circles) for as long as possible. When you need something better, here are free options:

itch.io: This is your best friend. Many artists release high-quality, free and pay-what-you-want asset packs. Search for "pixel art," "top down," "ship," "ocean," etc. Look for assets with a CC0 (Creative Commons Zero) license, which means you can use them for free with no attribution required.

OpenGameArt.org: A massive repository of free-to-use game assets. The quality varies, but there are hidden gems.

AI Generators (with caution): You mentioned a lack of success, but the tech is improving. Look for generators specifically trained on pixel art. They can be good for generating textures (wood planks, water tiles) or icons. It's still a bit hit-or-miss for animated sprites.

Kenney.nl: Kenney offers a huge collection of high-quality game assets, many of which are in the public domain. They are a staple of indie game development for a reason.

By combining asset packs from these sources, you can create a visually coherent style without having to draw a single pixel yourself.

This is a phenomenal concept with a ton of potential. By breaking it down into manageable chunks and focusing on a solid core loop first, you can absolutely bring this world to life. Good luck!